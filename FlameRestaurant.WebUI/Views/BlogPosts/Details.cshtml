@model BlogPost

@{
    ViewData["Title"] = "Blog Details";

    IEnumerable<BlogPostComment> GetComments(BlogPostComment parent)
    {
        if (parent.ParentId != null)
        {
            yield return parent;
        }
        foreach (var item in parent.Children.SelectMany(c => GetComments(c)))
        {
            yield return item;
        }
    }

}

<div class="page-header">
    <div class="page-header-content bg_image_header jarallax">
        <div class="container">
            <h1 class="heading">Blog Details</h1>
        </div>
    </div>
</div>

<div class="main-wrapper">
    <div class="container">
        <div class="blog_details">
            <div class="post_img">
                <img src="~/uploads/images/@Model.ImagePath" alt="blog">
            </div>
            <div class="blog_details_inner">
                <div class="post_content">
                    <div class="details_post_header">
                        <div class="calendar">@Model.PublishedDate?.ToString("MMM dd, yyyy")</div>
                        <h3 class="post_title">@Model.Title</h3>
                    </div>
                    <div class="fulltext first_para">
                        <p>
                            @Html.Raw(Model.Body)
                        </p>

                    </div>

                    <div class="post_footer">
                        <div class="post_share">
                            <ul class="share_list">
                                <li>Share:</li>
                                <li data-aos="fade-up" data-aos-duration="2500"><a href="https://www.instagram.com/mammadli_999/"><i class="ion-social-instagram-outline"></i></a></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="related_posts">
                    <h4 class="widget_title">Similar Posts</h4>
                    @await Component.InvokeAsync("RecentPosts")
                </div>


                <div class="row">
                    <div class="col-lg-11">
                        <div class="comments-area">
                            <h4 class="widget_title">Comments</h4>
                            <ul class="comment-list commentall">
                                @foreach (var comment in Model.Comments.Where(c => c.ParentId == null))
                                {
                                    <li class="comment" id="c-@comment.Id" data-comment-id="@comment.Id">
                                        <div class="commenter-block">
                                            <div class="commenter">
                                            </div>
                                            <div class="comment-content">
                                                <h4 class="comment-author-name">@($"{comment.CreatedByUser?.Name} {comment.CreatedByUser?.Surname}") </h4>
                                                <span class="comment-reply replay"><a class="comment-reply-link btn-comment-reply">Reply <i class="ion-chevron-right"></i><i class="ion-chevron-right"></i></a></span>
                                                <p class="comment-author-comment">
                                                    @comment.Text.ToPlainText();
                                                </p>
                                                <h6 class="comment-date">@comment.CreatedDate.ToString("MMMM d,yyyy ")</h6>
                                            </div>
                                        </div>
                                    </li>
                                    @foreach (var subComment in GetComments(comment))
                                    {
                                        <li class="comment replay sub-c" id="c-@subComment.Id" data-comment-id="@subComment.Id">
                                            <div class="commenter-block">
                                                <div class="commenter">
                                                </div>
                                                <div class="comment-content">
                                                    <h4 class="comment-author-name">@($"{subComment.CreatedByUser?.Name} {subComment.CreatedByUser?.Surname}")</h4>
                                                    <span class="comment-reply replay"><a class="comment-reply-link btn-comment-reply">Reply <i class="ion-chevron-right"></i><i class="ion-chevron-right"></i></a></span>
                                                    <p class="comment-author-comment">
                                                        <a href="#c-@subComment.ParentId">@@@subComment.Parent.CreatedByUser?.Name</a>
                                                        @subComment.Text.ToPlainText();
                                                    </p>
                                                    <h6 class="comment-date">@subComment.CreatedDate.ToString("MMMM d,yyyy ")</h6>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-11">
                        <div class="comment-respond" data-aos="fade-up" data-aos-duration="1000">
                            <h4 class="widget_title">Make A Comment</h4>
                            <form class="comment-form" method="post" id="replyForm">
                                <p class="logged-in-as"></p>
                                <div id="replyToComment"></div>
                                <input type="hidden" name="PostId" value="@Model.Id" />
                                <div class="form-container">
                                    <div class="row">
                                        <div class="col-md-12 col-lg-12">
                                            <div class="form-group">
                                                <textarea name="Comment" class="form-control" placeholder="Text Here*" required></textarea>
                                            </div>
                                        </div>
                                        <div class="col-md-12 col-lg-12">
                                            <div class="button_group">
                                                <input class="button" type="submit" >
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section addcss{
    <style>
        #replyToComment {
            position: relative;
        }

            #replyToComment .remove-reply-selected {
                position: absolute;
                color: black;
                font-size: 2rem;
                left: 660px;
                top: 33px;
            }
            .sub-c{
                padding-left: 90px;
            }
    </style>
}
    @section addjs{
    <script>
        function rebindReply() {
            $('.btn-comment-reply').unbind('click').click(function (e) {
                e.preventDefault();

                $('#replyToComment').html('<a href="javascript:removeReplySelected()" class="remove-reply-selected">&times;<i class="fa fa-x"></i></a>').append($(e.currentTarget).closest('.comment').clone());
            });
        }
        $(document).ready(function () {
            rebindReply();

            $('#replyForm').submit(function (e) {
                e.preventDefault();

                let formData = new FormData(e.currentTarget);

                let toCommentId = $('#replyToComment li.comment').data('comment-id');
                console.log($('#replyToComment li.comment').data('comment-id'));
                if (toCommentId != undefined) {
                    formData.set("commentId", toCommentId);
                    console.log(formData);
                }
                $.ajax({
                    url: `@Url.Action("Add")`,
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    success: function (response) {
                        console.log(response);
                    },
                    error: function (response) {

                        if (response.statusText == "parsererror") {
                            if (toCommentId != undefined) {

                                $(response.responseText).insertAfter($(`#c-${toCommentId}`));

                                $('#replyToComment').html('')
                                e.currentTarget.reset();
                            }
                            else {
                                $('ul.commentall').append($(response.responseText));
                                $('#replyToComment').html('')
                                e.currentTarget.reset();
                                rebindReply();
                            }
                        }
                        console.warn(response);
                    }
                });
            });
        });
        function removeReplySelected() {
            $('#replyToComment').html('');
        }
    </script>
}